version: '3.8'

services:
  # Banco de Dados Relacional
  postgres:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_USER: elearning
      POSTGRES_PASSWORD: securepass123
      POSTGRES_DB: elearning_db
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - elearning-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U elearning -d elearning_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped # Adicionado para reinício automático

  # Banco de Dados NoSQL
  mongodb:
    image: mongo:6
    container_name: mongo_db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: mongopass123
    volumes:
      - mongo_data:/data/db
    networks:
      - elearning-net
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')", "-u", "root", "-p", "mongopass123", "--authenticationDatabase", "admin"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped # Adicionado para reinício automático

  # Cache em Memória e Message Broker
  redis:
    image: redis:7.2-alpine
    container_name: redis_server
    command: redis-server --requirepass redispass123 --bind 0.0.0.0
    # environment: # REDIS_PASSWORD não é uma variável de ambiente padrão para a imagem do Redis, a senha é passada no comando
    #   REDIS_PASSWORD: redispass123 # Removido pois a senha é configurada via 'command'
    volumes:
      - redis_data:/data
    networks:
      - elearning-net
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redispass123", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped # Adicionado para reinício automático

  # Backend Spring Boot (agora também servindo o frontend via Thymeleaf)
  backend:
    build: ./backend
    container_name: spring_backend_app # Nome do container ajustado para clareza (opcional)
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - elearning-net
    ports:
      # A porta 8081 do container será acessível na porta 8081 do seu host.
      # Seus usuários acessarão a aplicação (incluindo páginas Thymeleaf) em http://localhost:8081
      - "8081:8081"
    # command: ["java", "-jar", "app.jar"] # O ENTRYPOINT do Dockerfile do backend já cuida disso
    environment:
      - SERVER_PORT=8081
      - SPRING_PROFILES_ACTIVE=docker
      - JWT_SECRET=sua_chave_secreta_super_forte_aqui_base64_pelo_menos_32_bytes # Idealmente, use segredos do Docker ou variáveis de ambiente do host
      - JWT_EXPIRATION=86400 # 24 horas em segundos
      # PostgreSQL
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres_db:5432/elearning_db
      - SPRING_DATASOURCE_USERNAME=elearning
      - SPRING_DATASOURCE_PASSWORD=securepass123
      # MongoDB
      - SPRING_DATA_MONGODB_URI=mongodb://root:mongopass123@mongo_db:27017/elearning_db?authSource=admin&authMechanism=SCRAM-SHA-256 # Nome do banco de dados mongo 'elearning_db'
      # Redis
      - SPRING_DATA_REDIS_HOST=redis_server
      - SPRING_DATA_REDIS_PASSWORD=redispass123
      - SPRING_DATA_REDIS_PORT=6379
      # Outras configurações que seu backend possa precisar
    healthcheck:
      # Ajuste o path do healthcheck se o base-path do actuator mudou ou se há um healthcheck específico
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped # Adicionado para reinício automático

volumes:
  pg_data:
  mongo_data:
  redis_data:

networks:
  elearning-net:
    driver: bridge
    name: elearning-net # Nome explícito para a rede
    # attachable: true # Geralmente não é necessário para a maioria dos casos de uso
    # ipam: # Configuração de IPAM é opcional e geralmente não necessária
    #   config:
    #     - subnet: 172.20.0.0/24
    #       gateway: 172.20.0.1