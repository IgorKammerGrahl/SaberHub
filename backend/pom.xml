<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.elearning</groupId>
    <artifactId>elearning-platform</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>

    <name>E-Learning Platform</name>
    <description>Plataforma de cursos corporativos</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.0</version> <!-- Mantendo sua versão do Spring Boot Parent -->
        <relativePath/>
    </parent>

    <properties>
        <java.version>17</java.version>
        <!-- Removido maven.compiler.source e target pois são herdados do parent e java.version -->
    </properties>

    <dependencies>
        <!-- Spring Boot Web (já inclui Tomcat e Spring MVC) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Thymeleaf: Para servir páginas HTML do backend -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>

        <!-- Spring Security (Core, Web, Config) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <!-- Spring Security Thymeleaf Extras: Para integração com Thymeleaf (ex: sec:authorize) -->
        <dependency>
            <groupId>org.thymeleaf.extras</groupId>
            <artifactId>thymeleaf-extras-springsecurity6</artifactId>
            <!-- A versão é geralmente gerenciada pelo Spring Boot BOM -->
        </dependency>

        <!-- Spring Data JPA (para PostgreSQL) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- Driver PostgreSQL -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Spring Data MongoDB -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-mongodb</artifactId>
        </dependency>
        <!-- mongodb-driver-sync já é uma dependência transitiva do starter-data-mongodb, não precisa declarar explicitamente -->

        <!-- Spring Data Redis (inclui Lettuce como cliente padrão) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <!-- lettuce-core e commons-pool2 são dependências transitivas do starter-data-redis, não precisam ser declaradas explicitamente
             a menos que você precise de uma versão específica que não seja a gerenciada pelo Spring Boot. -->
        <!--
        <dependency>
            <groupId>io.lettuce</groupId>
            <artifactId>lettuce-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-pool2</artifactId>
        </dependency>
        -->

        <!-- Validation API (para @Valid nos DTOs e validações de beans) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <!-- jakarta.persistence-api é uma dependência transitiva do spring-boot-starter-data-jpa, não precisa declarar explicitamente -->

        <!-- JWT Support (JJWT) -->
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-api</artifactId>
            <version>0.12.5</version> <!-- Mantendo sua versão especificada -->
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-impl</artifactId>
            <version>0.12.5</version> <!-- Mantendo sua versão especificada -->
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-jackson</artifactId> <!-- Para serialização/desserialização JSON de JWTs -->
            <version>0.12.5</version> <!-- Mantendo sua versão especificada -->
            <scope>runtime</scope>
        </dependency>

        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- Flyway (para migrações de banco de dados PostgreSQL) -->
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
        </dependency>
        <!-- flyway-database-postgresql é necessário se você usar callbacks específicos do PostgreSQL ou funcionalidades avançadas,
             mas para migrações SQL padrão, flyway-core com o driver JDBC é suficiente.
             Se precisar, descomente:
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-database-postgresql</artifactId>
        </dependency>
        -->


        <!-- Spring Boot Actuator (para /health, /info, etc.) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!-- spring-security-core é uma dependência transitiva do spring-boot-starter-security, não precisa declarar explicitamente -->
        <!--
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-core</artifactId>
        </dependency>
        -->

        <!-- Para Testes (se necessário) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
            <!-- O plugin exec-maven-plugin para BcryptHashGenerator pode ser mantido se você o usa para gerar hashes manualmente durante o desenvolvimento. -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>3.1.0</version> <!-- Versão que você tinha -->
                <executions>
                    <execution>
                        <goals>
                            <goal>java</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <mainClass>com.elearning.util.BcryptHashGenerator</mainClass>
                    <!-- Deixe os argumentos vazios ou configure para pedir input se for executado via 'mvn exec:java' -->
                    <!-- <arguments>
                        <argument>senha123</argument>
                    </arguments> -->
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>